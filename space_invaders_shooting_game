#!/usr/bin/env python
# coding: utf-8

# In[1]:


import turtle
import os
import math
import random
wn = turtle.Screen()
wn.bgcolor("black")
wn.title("Space Invaders game")
#wn.bgpic(r'C:\Users\Chiitrak Sarkar\Desktop\yo.gif')
#register the shape
border_pen = turtle.Turtle()
border_pen.speed(0)
border_pen.color("white")
border_pen.penup()
border_pen.setposition(-300,-300)
border_pen.pendown()
border_pen.pensize(3)
for side in range(4):
    border_pen.fd(600)
    border_pen.lt(90)
border_pen.hideturtle()
#SCore setting to zero
score = 0
#draw score on screen
score_pen = turtle.Turtle()
score_pen.speed(0)
score_pen.color("white")
score_pen.penup()
score_pen.setposition(-280,275)
scorestring = "SCORE : %s" %score
score_pen.write(scorestring,False,align="left",font=("Arial",15,"normal"))
score_pen.hideturtle()
#CREate turtle
player = turtle.Turtle()
player.color("purple")
player.shape("triangle")
player.penup()
player.speed(0)
player.setposition(0,-250)
player.setheading(90)
playerspeed = 15
#Choose number of enemies
number_of_enemies = 6
enemies = []


# In[2]:


#add enemies
for i in range(number_of_enemies):
    enemies.append(turtle.Turtle())
for enemy in enemies:
    # enemy
    enemy.color("red")
    enemy.shape("circle")
    enemy.penup()
    enemy.speed(0)
    x = random.randint(-200,200)
    y = random.randint(100,250)
    enemy.setposition(x, y)

enemyspeed = 2
#take a Bullet for me plss
bullet = turtle.Turtle()
bullet.color("yellow")
bullet.shape("triangle")
bullet.penup()
bullet.speed(0)
bullet.setheading(90)
bullet.shapesize(0.5,0.5)
bullet.hideturtle()
bulletspeed = 20
#define bullet state
#ready - ready to fire
#fire - bullet is firing
bulletstate = "ready"
#movement left right
def move_left():
    x = player.xcor()
    x-= playerspeed
    if x < -280:
        x=-280
    player.setx(x)
def move_right():
    x =player.xcor()
    x+= playerspeed
    if x > 280:
        x=280
    player.setx(x)
def fire_bullet():
#declare the bulletstate as a global if it needed to be changed
    global bulletstate
    if bulletstate == "ready":
        bulletstate = "fire"
        # position of bullet
        x = player.xcor()
        y = player.ycor()
        bullet.setposition(x, y + 10)
        bullet.showturtle()
def isCollision(t1,t2):
    distance = math.sqrt(math.pow(t1.xcor()-t2.xcor(),2)+math.pow(t1.ycor()-t2.ycor(),2))
    if distance < 15:
        return True
    else:
        return False
#keyboard actions

wn.listen()
wn.onkeypress(move_left,"Left")
wn.onkeypress(move_right,"Right")
wn.onkeypress(fire_bullet,"space")


# In[3]:


#MAIN GAME LOOP ///////////////////////////////////////////////////////////
while True:
    for enemy in enemies:
        # move enemy
        x = enemy.xcor()
        x += enemyspeed
        enemy.setx(x)
        if enemy.xcor() > 280:
        #Moves all enemies down
            for e in enemies:
                y = e.ycor()
                y -= 40
                e.sety(y)
            #change enemy direction
            enemyspeed *= -1
        if enemy.xcor() < -280:
            #move all enemies down
            for e in enemies:
                y = e.ycor()
                y -= 40
                e.sety(y)
            #change enemy direction
            enemyspeed *= -1
        # check for collision
        if isCollision(player, enemy):
            player.hideturtle()
            enemy.hideturtle()
            print("GAME OVER")
            break
        if isCollision(bullet, enemy):
            # reset the bullet
            bullet.hideturtle()
            bulletstate = "ready"
            bullet.setposition(0, -400)
            # reset the enemy
            x = random.randint(-200, 200)
            y = random.randint(100, 250)
            enemy.setposition(x, y)
            # Update the score
            score += 10
            scorestring = "SCORE : %s" %score
            score_pen.clear()
            score_pen.write(scorestring, False, align="left", font=("Arial", 14,
            "normal"))
    #move the bullet
    if bulletstate == "fire":
        y = bullet.ycor()
        y += bulletspeed
        bullet.sety(y)

    #rectify if bullet goes offscreen
    if bullet.ycor() > 275:
        bullet.hideturtle()
        bulletstate = "ready"
        
wn.mainloop()

